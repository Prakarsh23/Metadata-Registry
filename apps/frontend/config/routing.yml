#api
api_get:
  url:   /api/get/*.
  param: { module: api, action: get }

api_all:
  url:   /api/:objects/:action/*.
  param: { module: api}


# uri schema
uri_schema_html:
  url:  /uri/schema/:schema.html
  param: { module: api, action: get, class: schema, type: html, redir: true }

uri_schema_rdf:
  url:  /uri/schema/:schema.rdf
  param: { module: api, action: get, class: schema, type: rdf }

uri_schema_default:
  url:  /uri/schema/:schema.
  param: { module: api, action: get, class: schema, type: unknown, redir: true }

# uri schema property
uri_schemaprop_html:
  url:  /uri/schema/:schema/:property.html
  param: { module: api, action: get, class: schemaproperty, type: html, redir: true }

uri_schemaprop_rdf:
  url:  /uri/schema/:schema/:property.rdf
  param: { module: api, action: get, class: schemaproperty, type: rdf }

uri_schemaprop_default:
  url:  /uri/schema/:schema/:property.
  param: { module: api, action: get, class: schemaproperty, type: unknown, redir: true }

# uri concept scheme
uri_concept_html:
  url:  /uri/:scheme/:concept.html
  param: { module: rdf, action: showConcept, type: html }

uri_scheme_html:
  url:  /uri/:scheme.html
  param: { module: rdf, action: showScheme, type: html }

#uri concept
uri_concept_timeslice:
  url:  /uri/:scheme/:concept/ts/:ts.rdf
  param: { module: rdf, action: showConcept, type: uri }

uri_concept:
  url:  /uri/:scheme/:concept.rdf
  param: { module: rdf, action: showConcept, type: uri }

#uri_scheme
uri_scheme_timeslice:
  url:  /uri/:scheme/ts/:ts.rdf
  param: { module: rdf, action: showScheme, type: uri }

uri_scheme_version:
  url:  /uri/:scheme/version/:version.rdf
  param: { module: rdf, action: showScheme, type: uri }

uri_scheme:
  url:  /uri/:scheme.rdf
  param: { module: rdf, action: showScheme, type: uri }

uri_scheme_xml_schema_timeslice:
  url:  /uri/:scheme/ts/:ts.xsd
  param: { module: xml, action: showScheme, type: uri }

uri_scheme_xml_schema_version:
  url:  /uri/:scheme/version/:version.xsd
  param: { module: xml, action: showScheme, type: uri }

uri_scheme_xml_schema:
  url:  /uri/:scheme.xsd
  param: { module: xml, action: showScheme, type: uri }

uri_concept_unknown:
  url:  /uri/:scheme/:concept.
  param: { module: rdf, action: showConcept, type: unknown }

uri_scheme_unknown:
  url:  /uri/:scheme.
  param: { module: rdf, action: showScheme, type: unknown }

rdf_concept_timeslice:
  url:  /concept/show/id/:id/ts/:ts.rdf
  param: { module: rdf, action: showConcept, type: rdf }

rdf_schema_prop:
  url:  /schemaprop/show/id/:id.rdf
  param: { module: schemaprop, action: showRdf}

rdf_concept:
  url:  /concept/show/id/:id.rdf
  param: { module: rdf, action: showConcept, type: rdf }

rdf_vocabulary_timeslice:
  url:  /vocabulary/show/id/:id/ts/:ts.rdf
  param: { module: rdf, action: showScheme, type: rdf }

rdf_vocabulary_version:
  url:  /vocabulary/show/id/:id/version/:version.rdf
  param: { module: rdf, action: showScheme, type: rdf }

rdf_schema:
  url:  /schema/show/id/:id.rdf
  param: { module: schema, action: showRdf}

rdf_vocabulary:
  url:  /vocabulary/show/id/:id.rdf
  param: { module: rdf, action: showScheme, type: rdf }

xml_schema_vocabulary_timeslice:
  url:  /vocabulary/show/id/:id/ts/:ts.xsd
  param: { module: xml, action: showScheme, type: xmlschema }

xml_schema_vocabulary_version:
  url:  /vocabulary/show/id/:id/version/:version.xsd
  param: { module: xml, action: showScheme, type: xmlschema }

xml_schema_vocabulary:
  url:  /vocabulary/show/id/:id.xsd
  param: { module: xml, action: showScheme, type: xmlschema }


#discuss
discuss_list:
  url:   /discuss/list/:IdType/:id.html
  param: { module: discuss, action: list}

#file import
file_import:
  url:   /file/import/:IdType/:id.html
  param: { module: file, action: import}

# concepts
concept_search:
  url:   /conceptprop/search.
#  param: { module: search, action: index }
  param: { module: conceptprop, action: search }

# concept history

concept_history_feed_atom:
  url:   /history/feed/:IdType/:id.atom
  param: { module: history, action: feed, format: atom1}

concept_history_feed_rdf:
  url:   /history/feed/:IdType/:id.rdf
  param: { module: history, action: feed, format: rss10}

concept_history_feed_rss:
  url:   /history/feed/:IdType/:id.rss
  param: { module: history, action: feed, format: rss201}

concept_history_feed_all_atom:
  url:   /history/feed.atom
  param: { module: history, action: feed, format: atom1}

concept_history_feed_all_rdf:
  url:   /history/feed.rdf
  param: { module: history, action: feed, format: rss10}

concept_history_feed_all_rss:
  url:   /history/feed.rss
  param: { module: history, action: feed, format: rss201}

#vocabularies

vocabulary_history_list:
  url:   /vocabularies/:vocabulary_id/history
  param: { module: history, action: list, tabnav: vocabularies, IdType: vocabulary_id }
  requirements: { vocabulary_id: \d+ }


concept_history:
  url:   /concepts/:concept_id/history
  param: { module: history, action: list, tabnav: concepts, IdType: concept_id }


#imports
import_history_list:
  url:   /imports/:import_id/history
  param: { module: history, action: list, tabnav: imports }
  requirements: { import_id: \d+ }

import_schemahistory_list:
  url:   /schemaimports/:import_id/history
  param: { module: schemahistory, action: list, tabnav: imports }
  requirements: { import_id: \d+ }


#history
history_show:
  url:   /history/:id
  param: { module: history, action: show }

#element sets (schemas)
schema_publish:
  url:   /elementsets/:id/publish
  param: { module: schema, action: publish }
  requirements: { id: \d+ }


schema_schemahistory_list:
  url:   /elementsets/:schema_id/history
  param: { module: schemahistory, action: list, tabnav: elementsets }
  requirements: { schema_id: \d+ }

concept_history_list:
  url:   /concepts/:concept_id/history
  param: { module: history, action: list, tabnav: vocabularies, IdType: concept_id }
  requirements: { concept_id: \d+ }

#properties
conceptprop_history_list:
  url:   /properties/:concept_property_id/history
  param: { module: history, action: list, tabnav: properties, IdType: concept_property_id }
  requirements: { concept_property_id: \d+ }


agent_agentuser_resource:
  url:   /agents/:agent_id/members
  param: { module: agentuser, tabnav: agents }

agent_vocabulary_resource:
  url:   /agents/:agent_id/vocabularies
  param: { module: vocabulary, tabnav: agents }

agent_schema_resource:
  url:   /agents/:agent_id/elementsets
  param: { module: schema, tabnav: agents }

agentuser_resource:
  url:   /agent_members
  param: { module: agentuser, tabnav: agents}

agent_resource:
  url:   /agents
  param: { module: agent, tabnav: agents }

concept_conceptprop_resource:
  url:   /concepts/:concept_id/properties
  param: { module: conceptprop, tabnav: concepts }

concept_resource:
  url:   /concepts
  param: { module: concept, tabnav: concepts }

conceptprop_resource:
  url:   /properties
  param: { module: conceptprop, tabnav: properties }

profile_profileprop_resource:
  url: /profiles/:profile_id/properties
  param: { module: profileprop }

profile_resource:
  url: /profiles
  param: { module: profile }

schemauser_resource:
  url:   /elementset_maintainers
  param: { module: schemauser, tabnav: elementsets_maintainers}

schema_schemaprop_resource:
  url:   /elementsets/:schema_id/elements
  param: { module: schemaprop, tabnav: elementsets }

schema_schemauser_resource:
  url:   /elementsets/:schema_id/maintainers
  param: { module: schemauser, tabnav: elementsets}

schema_export_resource:
  url:   /elementsets/:schema_id/exports
  param: { module: export, tabnav: elementsets  }

schema_import_resource:
  url:   /elementsets/:schema_id/imports
  param: { module: import, tabnav: elementsets }

schema_resource:
  url:   /elementsets
  param: { module: schema, tabnav: elementsets }

schemaprop_schemapropel_resource:
  url:   /elements/:schema_property_id/statements
  param: { module: schemapropel, tabnav: elements }

schemaprop_resource:
  url:   /elements
  param: { module: schemaprop, tabnav: elements }

user_agent_resource:
  url:   /members/:user_id/agents
  param: { module: agentuser, tabnav: members }

user_schemauser_resource:
  url:   /members/:user_id/elementset_maintainers
  param: { module: schemauser, tabnav: members}

user_schema_list:
  url:   /members/:user_id/elementsets
  param: { module: schema, action: list, tabnav: members}
  requirements: { user_id: \d+ }

user_vocabuser_resource:
  url:   /members/:user_id/vocabulary_maintainers
  param: { module: vocabuser, tabnav: members}

user_vocabulary_list:
  url:   /members/:user_id/vocabularies
  param: { module: vocabulary, action: list, tabnav: members}
  requirements: { user_id: \d+ }

user_schema_list:
  url:   /members/:user_id/elementsets
  param: { module: schema, action: list, tabnav: members}
  requirements: { user_id: \d+ }

user_resource:
  url:   /members
  param: { module: user, tabnav: members }

vocabulary_concept_resource:
  url:   /vocabularies/:vocabulary_id/concepts
  param: { module: concept, tabnav: vocabularies }
  requirements: { vocabulary_id: \d+ }

vocabulary_export_resource:
  url:   /vocabularies/:vocabulary_id/exports
  param: { module: export, tabnav: vocabularies }
  requirements: { vocabulary_id: \d+ }

vocabulary_import_resource:
  url:   /vocabularies/:vocabulary_id/imports
  param: { module: import, tabnav: vocabularies }
  requirements: { vocabulary_id: \d+ }

vocabulary_vocabuser_resource:
  url:   /vocabularies/:vocabulary_id/maintainers
  param: { module: vocabuser, tabnav: vocabularies}
  requirements: { vocabulary_id: \d+ }

vocabulary_version_resource:
  url:   /vocabularies/:vocabulary_id/versions
  param: { module: version, tabnav: vocabularies }
  requirements: { vocabulary_id: \d+ }

vocabuser_resource:
  url:   /vocabulary_maintainers
  param: { module: vocabuser, tabnav: vocabularies}

vocabulary_resource:
  url:   /vocabularies
  param: { module: vocabulary, tabnav: vocabularies}



schemapropel_show:
  url:   /statements/:id
  param: { module: schemapropel, action: show, tabnav: statements }
  requirements: { id: \d+ }

import_show:
  url:   /imports/:id
  param: { module: import, action: show, tabnav: imports }
  requirements: { id: \d+ }


#elements (schemaprops)

schemaprop_schemahistory_list:
  url:   /elements/:schema_property_id/history
  param: { module: schemahistory, action: list, tabnav: elements, IdType: schema_property_id }
  requirements: { schema_property_id: \d+ }

#statements

schemapropel_schemahistory_list:
  url:   /statements/:schema_property_element_id/history
  param: { module: schemahistory, action: list, tabnav: statements, IdType: schema_property_element_id }
  requirements: { schema_property_element_id: \d+ }

schema_search:
  url:   /schemaprop/search.
  param: { module: schemaprop, action: search }

schemaprop_language:
  url:   /schemaprop/language.
  param: { module: schemaprop, action: language }

#schema history
legacy_schema_history_list:
  url:   /schemahistory/list/:IdType/:id.html
  param: { module: schemahistory, action: list}

schemahistory_show:
  url:   /schemahistory/:id
  param: { module: schemahistory, action: show}
  requirements: { id: \d+ }


schema_history_feed_atom:
  url:   /schemahistory/feed/:IdType/:id.atom
  param: { module: schemahistory, action: feed, format: atom1}

schema_history_feed_rdf:
  url:   /schemahistory/feed/:IdType/:id.rdf
  param: { module: schemahistory, action: feed, format: rss10}

schema_history_feed_rss:
  url:   /schemahistory/feed/:IdType/:id.rss
  param: { module: schemahistory, action: feed, format: rss201}

schema_history_feed_all_atom:
  url:   /schemahistory/feed.atom
  param: { module: schemahistory, action: feed, format: atom1}

schema_history_feed_all_rdf:
  url:   /schemahistory/feed.rdf
  param: { module: schemahistory, action: feed, format: rss10}

schema_history_feed_all_rss:
  url:   /schemahistory/feed.rss
  param: { module: schemahistory, action: feed, format: rss201}


all_history_feed_atom:
  url:   /allhistoryfeeds.atom
  param: { module: content, action: allHistoryFeeds, format: atom1}


# user
user_save:
  url:   /user/save
  param: { module: user, action: save }

user_profile:
  url:   /user/:nickname
  param: { module: user, action: showSubscriber }

user_update:
  url:   /update_user
  param: { module: user, action: update }

current_user_profile:
  url:   /user
  param: { module: user, action: showSubscriber }

add_account:
  url:   /add_user
  param: { module: user, action: add }

user_require_password:
  url:   /password_request
  param: { module: user, action: passwordRequest }

# login
login:
  url:   /login
  param: { module: user, action: login }

logout:
  url:   /logout
  param: { module: user, action: logout }

# content
about:
  url:   /about
  param: { module: content, action: about }
languages:
  url:   /languages
  param: { module: content, action: languages }

# default rules
homepage:
  url:   /
  param: { module: content, action: home }

default_symfony:
  url:   /symfony/:action/*
  param: { module: default }

default_index:
  url:   /:module
  param: { action: index }

default_resource:
  url:   /:module/:id
  requirements: { id: \d+ }

default:
  url:   /:module/:action/*
