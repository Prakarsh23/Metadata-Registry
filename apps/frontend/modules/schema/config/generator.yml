generator:
  class:              sfPropelAdminGenerator
  param:
    model_class:      Schema
    theme:            default
    label_singular:   Element Set
    label_plural:     Element Sets
    parents:
      agent:
        getid:        agent_id
        requestid:    agent_id
    pager:
      no_results:     No Element Sets have been defined

    fields:
      id:             { name: ID, type: plain}
      created_at:     { name: Date Created, type: plain, params: date_format='s', help: This is the date the element set was created }
      updated_at:     { name: Last Updated, type: plain, params: date_format='s', help: This is the date the element set was last updated }
      agent:          { name: Agent, help: The individual or organization that registered the element set }
      agent_id:       { name: Agent, help: The individual or organization that registered the element set }
      created_user:   { name: Created by, type: plain, help: The member who created this element set}
      updated_user:   { name: Updated by, type: plain, help: The member who last updated this element set}
      name:           { name: Label, help: A human-readable descriptive label for the element set. This will be displayed in lists of element sets. }
      note:           { name: Description, help: A general description of this element set }
      url:            { name: URL, help: A non-Registry URL that contains more information about this element set }
      base_domain:    { name: Base Domain, help: The root of all URIs for this element set and its elements. }
      token:          { name: Prefix, help: A unique token representing this element set. This will be used as the prefix identifying this URI in RDF or a qname in XML}
      uri:            { name: URI, help: The URI of this element set. By default this will be a concatenation of the Registry default domain and the element set Name. }
      community:      { name: Tags, help: Tags identifying communities of practice that this element set addresses }
      language:       { name: Default Language, help: Default language for the textual properties of this element set }
      languages:      { name: Available Languages, help: Available languages for the textual properties of this element set }
      status_id:      { name: Default Status, help: Default status for the properties of this element set }
      repo:           { name: Git Repository, help: This is the name of the Git Repo that will hold this Element Set  }
      ns_type:
        name: Type
        help: "Element set URI will be terminated with either a hash ( # ) or a slash ( / ) to identify the namespace"
        type: select_tag
        params:
          select_options:
            hash:  hash
            slash: slash

    list:
      title:          Element Sets
      fields:
        updated_at:   { params: date_format='yyyy-MM-dd' }
        agent:        { helper: link_to_object, condition: "!$sf_request->getParameter('agent_id')" }

      display:        [=name, agent, status, updated_at, updated_user]
      sort:           name
      object_actions:
        _edit:        { credentials: [[administrator, schemamaintainer, schemaadmin]] }
      actions:
        _create:      { query_string: { sf_request: agent_id }, name: Add Element Set, credentials: [[administrator, hasAgents, agentadmin]], route: agent_schema_create }
      filters:        [agent_id, status_id]
      urlfilters:
        agent_id:     agent_id
        user_id:      user_id

    edit:
      title:
        mode:
          edit:       Editing %%name%%
          create:     Creating new element set
      helptype:       icon
      fields:
        id:           { type: plain, credentials: [administrator], mode: edit }
#        agent_id:     { params: peer_method=getAgentsForCurrentUser}
        token:        { params: onblur=updateUri() }
        languages:    { type: admin_select_language, params: multiple=true style="width:99%" }
        language:     { type: admin_select_language, params: limitmethod=getLanguages style="width:99%" }
        namespace:    { name: Namespace, type: plain}
      hide:           [agent_id]
      display:
        "-Metadata":  { fields: [id, created_at, created_user, updated_at, updated_user], mode: edit }
        "Detail":     [agent_id, name, languages, language]
        "Namespace":  [ base_domain, token, uri, ns_type, namespace]
        "Publishing": [ repo, status_id]
        "Documentation": [url, note, community]
      actions:
#        _list:         -
        _save:         { credentials: [[administrator, hasAgents, schemamaintainer, schemaadmin]] }
        _delete:       { credentials: [administrator] }
        _save_and_add: { credentials: [administrator] }
        _cancel:       { only_for: create, query_string: {sf_request: agent_id}, route: agent_schema, credentials: [[administrator, hasAgents, schemamaintainer, schemaadmin]]}
        _cancel:       { only_for: edit, query_string: {agent_id: agent_id}, route: agent_schema, credentials: [[administrator, hasAgents, schemamaintainer, schemaadmin]] }
      urlfilters:
        agent_id:     agent_id
        user_id:      user_id

    show:
      fields:
        id:            { credentials: [administrator] }
        uri:           { helper: auto_link_uri }
        url:           { helper: auto_link_uri }
        created_at:    { params: date_format='F' }
        updated_at:    { params: date_format='F' }
        list_users:    { name: - }
        namespace:    { name: Namespace }
      display:
        "-Metadata":   { fields: [id, created_at, created_user, updated_at, updated_user], credentials: [[administrator, schemamaintainer, schemaadmin]] }
        "Detail":      [_agent, name, _languages, _language, status]
        "Namespace":   [uri, namespace]
        "Publishing": [ repo, status]
        "Documentation": [url, note, community]
      actions:
#        _list:
        _edit:       { credentials: [[administrator, schemamaintainer, schemaadmin]] }
        _publish:    { credentials: [[administrator]] }
      urlfilters:
        agent_id:     agent_id
        user_id:      user_id

