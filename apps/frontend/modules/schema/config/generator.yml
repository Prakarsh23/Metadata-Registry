generator:
  class:              sfPropelAdminGenerator
  param:
    model_class:      Schema
    theme:            default
    fields:
      id:             { name: ID, type: plain}
      created_at:     { name: Date Created, type: plain, params: date_format='s', help: This is the date the element set was created }
      updated_at:     { name: Last Updated, type: plain, params: date_format='s', help: This is the date the element set was last updated }
      agent:          { name: Owner, help: The individual or organization that registered the element set }
      agent_id:       { name: Owner, help: The individual or organization that registered the element set }
      created_user:   { name: Created by, type: plain, help: The user who created this element set}
      updated_user:   { name: Updated by, type: plain, help: The user who last updated this element set}
      name:           { name: Label, help: A human-readable descriptive label for the element set. This will be displayed in lists of element sets. }
      note:           { name: Note, help: A note about this element set }
      url:            { name: URL, help: A non-Registry URL that contains more information about this element set }
      base_domain:    { name: Base Domain, help: The root of all URIs for this element set and its elements. Defaults to the Base Domain set by the Owner of this element set. }
      token:          { name: Name, help: A unique token representing this element set. This will be used as the prefix identifying this URI in RDF or a qname in XML}
      uri:            { name: URI, help: The URI of this element set. By default this will be a concatenation of the Registry default domain and the element set Name. }
      community:      { name: Tags, help: Tags identifying communities of practice that this element set addresses }
      language:       { name: Language, help: Default language for the properties of this element set }
      status_id:      { name: Status, help: Default status for the properties of this element set }
#      ns_type:
#        name: Type
#        help: "Element set URI will be terminated with either a hash ( # ) or a slash ( / ) to identify the namespace"
#        type: select_tag
#        params:
#          select_options:
#            hash:  hash
#            slash: slash

    list:
      title:          Element Sets
      fields:
        updated_at:   { params: date_format='yyyy-MM-dd' }
      display:        [=name, _agent, updated_at, updated_user]
      sort:           name
      object_actions:
        _edit:        { credentials: [[administrator, schemamaintainer, schemaadmin]] }
      actions:
        _create:      { name: Add Element Set,  credentials: [[administrator, hasAgents]] }
      filters:
#        agent_id:     { name: agent_id, params: peer_method=getSchemaAgents related_class=Schema }
        agent_id:     agent_id

    edit:
      title:
        mode:
          edit:       Editing %%name%%
          create:     Creating new element set
      helptype:       icon
      fields:
        id:           { credentials: [administrator], mode: edit }
        agent_id:     { params: peer_method=getAgentsForCurrentUser}
        token:        { params: onblur=updateUri() }
        language:     { type: select_language_tag }
      hide:           [base_domain]
      display:
        "-Metadata":  { fields: [id, created_at, created_user, updated_at, updated_user], mode: edit }
        "Detail":     [agent_id, name]
#        "Namespace":  [token, uri, ns_type]
        "Namespace":  [token, uri]
        "Documentation": [url, note, community]
        "Defaults":   [status_id, language]
      actions:
        _list:         -
        _save:         { credentials: [[administrator, hasAgents, schemamaintainer, schemaadmin]] }
        _delete:       { credentials: [administrator] }
        _create:       { credentials: [[administrator, hasAgents]], mode: edit }
        _save_and_add: { credentials: [administrator] }
        _cancel:       { credentials: [[administrator, hasAgents, schemamaintainer, schemaadmin]] }

    show:
      title:           Show detail for %%name%%
      fields:
        id:            { credentials: [administrator] }
        uri:           { helper: auto_link_uri }
        url:           { helper: auto_link_text }
        created_at:    { params: date_format='F' }
        updated_at:    { params: date_format='F' }
        list_users:    { name: - }
      display:
        "-Metadata":   { fields: [id, created_at, created_user, updated_at, updated_user], credentials: [[administrator, schemamaintainer, schemaadmin]] }
        "Detail":      [_agent, name]
#        "Namespace":   [token, uri, ns_type]
        "Namespace":   [token, _uri]
        "Documentation": [url, note, community]
        "Defaults":    [status, _language]
        "-Users":      [_list_users]
      actions:
        _list:
        _edit:       { credentials: [[administrator, schemamaintainer, schemaadmin]] }
        showRdf:
          name:      Get RDF
          icon:      %SF_ADMIN_WEB_DIR%/images/rdf_icon.png
          route:     rdf_schema
