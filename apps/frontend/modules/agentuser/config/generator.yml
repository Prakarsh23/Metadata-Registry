generator:
  class:              sfPropelAdminGenerator
  param:
    model_class:      AgentHasUser
    theme:            default
    label_singular:   Project
    label_plural:     Projects
    parents:
      agent:
        getid:        agent_id
        requestid:    agent_id
      user:
        getid:        user_id
        requestid:    user_id
    pager:
      no_results:     No Project/Member relationships have been defined


    fields:
      id:                { name: ID, type: plain, credentials: [administrator] }
      created_at:        { name: Date Created, type: plain, credentials: [administrator] }
      updated_at:      { name: Last Updated, type: plain, credentials: [administrator] }
      is_admin_for:      { name: Administrator }
      is_registrar_for:  { name: Registrar }

    list:
      peer_method:     doSelectJoinAll
      title:           Members of %%agent%%
      fields:
        agent:         { name: Project, type: link, condition: "!$sf_request->getParameter('agent_id')", helper: link_to_object }
        user:          { name: Member, type: link, condition: "!$sf_request->getParameter('user_id')", helper: link_to_object }
      display:         [ -user, +agent, isRegistrarFor, isAdminFor]
      object_actions:
        _show:
        _edit:         { credentials: [[administrator, agentadmin]], query_string: { agent_id: agent_id}, route: agent_agentuser_edit }
        _delete:       { credentials: [[administrator, agentadmin]], query_string: { agent_id: agent_id}, route: agent_agentuser_delete, condition: "!$agent_has_user->getIsRegistrarFor()" }
      actions:
        _create:       { name: Add Member, credentials: [[administrator, agentadmin]] }
      displayfilter:   false
      filters:         [agent_id, user_id]
      urlfilters:
        agent_id:      agent_id
        user_id:       user_id

    edit:
      title:
        mode:
          edit:       "Editing Project: \"%%agent%%\" permissions for %%user%% "
          create:     Adding New Member to %%agent%%
      helptype:       icon
      fields:
        user_id:        { params: peer_method=getNewUsersForAgent include_blank=false, mode: create }
        user:          { type: plain, mode: edit }
        agent_id:      { type: plain }
      hide:            [agent_id]
      display:         [user, user_id, isAdminFor]
      actions:
        _save:         { credentials: [[administrator, agentadmin]] }
        _delete:       { credentials: [[administrator, agentadmin]], condition: "!$agent_has_user->getIsRegistrarFor()" }
        _cancel:       { credentials: [[administrator, agentadmin]] }
      urlfilters:
        agent_id:      agent_id

    show:
      title:           "Project: \"%%agent%%\" permissions for %%user%%"
      fields:
        user:          { type: plain }
      display:         [_member, isRegistrarFor, isAdminFor]
      actions:
        _delete:       { credentials: [[administrator, agentadmin]], query_string: { agent_id: agent_id}, route: agent_agentuser_delete }
        _edit:         { credentials: [[administrator, agentadmin]], query_string: { agent_id: agent_id}, route: agent_agentuser_edit }
        _create:       { name: Add Member, credentials: [[administrator, agentadmin]], query_string: { agent_id: agent_id}, route: agent_agentuser_create }
