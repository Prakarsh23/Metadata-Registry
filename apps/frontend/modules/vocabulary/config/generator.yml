generator:
  class:              sfPropelAdminGenerator
  param:
    model_class:      Vocabulary
    theme:            default
    label_singular:   Vocabulary
    label_plural:     Vocabulary
    parents:
      agent:
        getid:        agent_id
        requestid:    agent_id
    pager:
      no_results:     No Vocabularies have been defined

    fields:
      id:             { name: ID, type: plain}
      created_at:     { name: Date Created, type: plain, params: date_format='s', help: This is the date the Vocabulary was created }
      last_updated:   { name: Last Updated, type: plain, params: date_format='s', help: This is the date the Vocabulary was last updated }
      agent:          { name: Agent, help: The individual or organization that registered the vocabulary }
      agent_id:       { name: Agent, help: The individual or organization that registered the vocabulary }
      name:           { name: Label, help: A descriptive name for the vocabulary. This will be displayed in lists of vocabularies. }
      note:           { name: Description, help: A general description of this vocabulary }
      url:            { name: URL, help: A non-Registry URL that contains more information about this vocabulary }
      base_domain:    { name: Base Domain, help: The root of all URIs for this vocabulary and its terms. Defaults to the Base Domain set by the Owner of this vocabulary. }
      token:          { name: Token, help: A unique token representing this vocabulary. This is combined with the Base Domain to create a unique Namespace for this vocabulary. }
      uri:            { name: URI, help: The URI of this vocabulary. By default this will be a concatenation of the Base Domain and the Token. }
      community:      { name: Community, help: Tags identifying communities of practice that this vocabulary addresses }
      language:       { name: Default Language, help: Default language for the textual properties of this vocabulary }
      languages:      { name: Available Languages, help: Available languages for the textual properties of this vocabulary }
      status_id:      { name: Default Status, help: Default status for the concept properties of this vocabulary }
      repo:           { name: Git Repository, help: This is the name of the Git Repo that will hold this vocabulary }
      prefix:         { name: Prefix, help: This will be used as the prefix identifying this URI in an RDF CURIE or a qname in XML. }
      ns_type:
        name: Type
        help: "The Vocabulary URI will be terminated with either a hash ( # ) or a slash ( / ) to identify the namespace "
        type: select_tag
        params:
          select_options:
            hash:  hash
            slash: slash

    list:
      title:          Vocabularies
      fields:
        last_updated: { params: date_format='yyyy-MM-dd' }
        agent:        { helper: link_to_object, condition: "!$sf_request->getParameter('agent_id')" }
      display:        [=name, agent, status, last_updated]
      sort:           name
      object_actions:
        _edit:        { credentials: [[administrator, vocabularymaintainer, vocabularyadmin]] }
      actions:
        _create:      { query_string: { sf_request: agent_id }, name: Add Vocabulary, credentials: [[administrator, hasAgents, agentadmin]], route: agent_vocabulary_create }

      filters:        [agent_id, status_id]
      urlfilters:
        agent_id:     agent_id
        user_id:      user_id

    edit:
      title:
        mode:
          edit:       Editing %%name%%
          create:     Creating new vocabulary
      helptype:       icon
      fields:
        id:           { name: ID, type: plain, credentials: [administrator], mode: edit }
#        agent_id:     { params: peer_method=getAgentsForCurrentUser}
        token:        { params: onblur=updateUri() }
        languages:    { type: admin_select_language, params: multiple=true style="width:99%" }
        language:     { type: admin_select_language, params: limitmethod=getLanguages style="width:99%" }
        namespace:    { name: Namespace, type: plain}
      hide:           [agent_id]
      display:
        "-Metadata":  { fields: [id, created_at, last_updated], mode: edit, credentials: [[administrator, vocabularymaintainer, vocabularyadmin]] }
        "Detail":     [agent_id, name, languages, language]
        "Namespace":  [ base_domain, token, uri, ns_type, namespace, prefix]
        "Publishing": [ repo, status_id]
        "Documentation": [url, note, community]
      actions:
#        _list:         -
        _save:         { credentials: [[administrator, hasAgents, vocabularymaintainer, vocabularyadmin]] }
        _delete:       { credentials: [administrator] }
        _save_and_add: { credentials: [administrator] }
        _cancel:       { only_for: create, query_string: {sf_request: agent_id}, route: agent_vocabulary_list, credentials: [[administrator, hasAgents, vocabularymaintainer, vocabularyadmin]]}
        _cancel:       { only_for: edit, query_string: {agent_id: agent_id}, route: agent_vocabulary, credentials: [[administrator, hasAgents, vocabularymaintainer, vocabularyadmin]] }
      urlfilters:
        agent_id:     agent_id
        user_id:      user_id

    show:
      fields:
        id:            { name: ID, type: plain, credentials: [administrator], mode: edit }
        uri:           { helper: auto_link_uri }
        url:           { helper: auto_link_uri }
        created_at:    { params: date_format='F' }
        last_updated:  { params: date_format='F' }
        list_users:    { name: - }
        namespace:    { name: Namespace }
      display:
        "-Metadata":   { fields: [id, created_at, created_user, last_updated, updated_user], credentials: [[administrator, vocabularymaintainer, vocabularyadmin]] }
        "Detail":      [_agent, name, _languages, _language]
        "Namespace":   [uri, namespace, prefix]
        "Publishing":  [ repo, status]
        "Documentation": [url, note, community]
        "-Members":      [_list_users]
      actions:
#        _list:
        _edit:       { credentials: [[administrator, vocabularymaintainer, vocabularyadmin]] }
        _publish:    { credentials: [[administrator]] }
        rdf:
          name:      Get RDF
          icon:      %SF_ADMIN_WEB_DIR%/images/rdf_icon.png
          route:     rdf_vocabulary
        xml:
          name:      Get XML Schema
          icon:      %SF_ADMIN_WEB_DIR%/images/xmlschema_icon.png
          route:     xml_schema_vocabulary
          params:    "style=\"background: #ffc url(/jpAdminPlugin/images/xmlschema_icon.png) no-repeat 3px; padding-left:25px !important\" "
      urlfilters:
        agent_id:     agent_id
        user_id:      user_id
